/**
 * Parser to convert tokens emitted by the lexer into semantic groups.
 *
 * @author Jonathan Uhler
 */


#ifndef _ASSEMBLER_PARSER_H_
#define _ASSEMBLER_PARSER_H_


#include "assembler/lexer.h"
#include "architecture/isa.h"
#include "structures/list.h"
#include <stdint.h>
#include <stdio.h>


/**
 * The possible semantic group types.
 */
enum parser_group_type {
    /** A group of tokens that form an instruction (any Format/type, including pseudo). */
    PARSER_GROUP_INSTRUCTION,
    /** A group of tokens that define a label. */
    PARSER_GROUP_LABEL,
    /** A group of tokens that define a directive. */
    PARSER_GROUP_DIRECTIVE,
    /** End of file; no semantic group was generated. */
    PARSER_GROUP_EOF
};


struct parser_group_instruction {
    enum isa_opcode opcode;
    enum isa_register dest;
    enum isa_register source1;
    enum isa_register source2;
    char label[LEXER_TOKEN_MAX_LENGTH + 1];
    uint16_t immediate;
    uint32_t binary;
};


struct parser_group_label {
    char label[LEXER_TOKEN_MAX_LENGTH + 1];
    uint32_t immediate;
};


/**
 * A structure representing a single group of tokens that form a single semantic unit.
 */
struct parser_group {
    /** The type of the group, used to determine which other members are usable. */
    enum parser_group_type type;
    union {
        struct parser_group_instruction instruction;
        struct parser_group_label label;
    };
};


/**
 * The status of parser API functions.
 */
enum parser_status {
    /** The parser operation was successful. */
    PARSER_STATUS_SUCCESS = 0,
    /** The parser reached the end of the file. */
    PARSER_STATUS_EOF     = 1,
    /** The parser API function was called with an invalid argument. */
    PARSER_STATUS_INVALID_ARGUMENT,
    /** The parser encountered a semantic error during parsing. */
    PARSER_STATUS_SEMANTIC_ERROR
};


/**
 * Parses all semantic groups from a list of tokens generated by the lexer, returning them in
 * chronological order.
 *
 * Parsing will proceed until the entire token stream is read (EOF) or an error is encountered. The
 * parser does not need to be called as a generator to get further semantic groups after a
 * successful call.
 *
 * @param tokens[inout]  The list of tokens to parse. Tokens will be popped from this list.
 * @param base_address   The base address for the generated code, used during label resolution.
 * @param groups[out]    A pointer to return a list of processed semantic groups. It is the caller's
 *                       responsibility to free this list with the structures/list API. The groups
 *                       must be freed with the list_default_node_free_callback to free the node
 *                       data as well.
 *
 * @return The status of the parser call. If SUCCESS, the parser proceeded all tokens and stored
 *         the associated semantic groups in the list output pointer (in a new list allocated by the
 *         parser). If failure, the parser encountered an error and should not be called again on
 *         the same token list. If a non-success status is returned, the caller does not need to
 *         free the groups list.
 */
enum parser_status parser_parse_tokens(struct list *tokens,
                                       uint16_t base_address,
                                       struct list **groups);


#endif  // _ASSEMBLER_PARSER_H_
